function [x,y,x_int,y_int,x_ext,y_ext,C,D] = forward_one_nanowire(xc,r,ns,n1,lambda0,N,alpha)

if nargin > 6
    alpha = 0.86;
end

[eta0, n0] = load_constants();

Gamma_r = (n0 - ns)/(n0 + ns);
Gamma_t = 2*n0/(n0 + ns);
k0 = 2*pi/lambda0;

phi = linspace(0,2*pi,N)';

x = r*cos(phi) + xc;
y = r*sin(phi) + r;
x_int = alpha*r*cos(phi') + xc;
y_int = alpha*r*sin(phi') + r;
x_ext = 1/alpha*r*cos(phi') + xc;
y_ext = 1/alpha*r*sin(phi') + r;

k1 = - exp(1i*k0*y) - Gamma_r * exp(-1i*k0*y);
k2 = sin(phi)/eta0 .* (- exp(1i*k0*y) - Gamma_r * exp(-1i*k0*y));

k = [k1; k2];

H02 = @(z) besselh(0,2,z);
H12 = @(z) besselh(1,2,z);

numerical = @(x,y) sqrt(x.^2+y.^2);

abs_int     = numerical(x-x_int,y-y_int);
abs_int_ref = numerical(x-x_int,y+y_int);
abs_ext     = numerical(x-x_ext,y-y_ext);

k1 = k0*ns/n0;

a1 = H02(k0*abs_int) + Gamma_r*H02(k0*abs_int_ref);
a2 = -H02(k1*abs_ext);
a3 = 1i/eta0 * (1./abs_int     .* H12(k0*abs_int)     .* (sin(phi).*(y - y_int)+cos(phi).*(x - x_int)) + ...
                1./abs_int_ref .* H12(k0*abs_int_ref) .* (sin(phi).*(y + y_int)+cos(phi).*(x - x_int)));
a4 = -1i*n1/eta0 * 1./abs_ext .* (sin(phi).*(y - y_ext) + cos(phi).*(x - x_ext)).*H12(k1*abs_ext);
A = [a1 a2; a3 a4];
det(A)
size(A)
c = A\k;

C = c(1:N);
D = c(N+1:end);

